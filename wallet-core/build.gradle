import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.ReduceDuplicateLicensesFilter
import com.github.jk1.license.render.InventoryMarkdownReportRenderer


plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    alias libs.plugins.dokka
    alias libs.plugins.dependency.license.report
    alias libs.plugins.dependencycheck
    alias libs.plugins.sonarqube
    alias libs.plugins.maven.publish
}

apply from: 'jacoco.gradle'

android {
    namespace NAMESPACE
    group GROUP
    compileSdk 33

    defaultConfig {
        minSdk 26
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.java.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.java.get())
    }
    kotlinOptions {
        jvmTarget = libs.versions.java.get()
    }

    sourceSets {
        test {
            resources {
                srcDirs 'src\\test\\assets'
            }
        }
    }

//    publishing {
//        singleVariant('release') {
//            withSourcesJar()
//            // TODO fix javadoc in release
//            //  task javaDocReleaseGeneration fails with java.lang.UnsupportedOperationException: PermittedSubclasses requires ASM9
//            //  caused by eu.europa.ec.eudi.openid4vp.ResolvedRequestObject which is a sealed interface
////            withJavadocJar()
//        }
//    }
}

dependencies {

    implementation libs.appcompat

    // EUDI libs
    api libs.eudi.document.manager
    api libs.eudi.iso18013.data.transfer

    // CBOR
    implementation libs.cbor

    // siop-openid4vp library
    implementation libs.siop.openid4vp

    // Ktor Android Engine
    runtimeOnly libs.ktor.client.android

    // Bouncy Castle
    implementation libs.bouncy.castle.prov
    implementation libs.bouncy.castle.pkix

    testImplementation libs.junit
    testImplementation libs.json
    testImplementation libs.mockk
    testImplementation libs.mockito.inline
    testImplementation libs.mockito.kotlin
    testImplementation libs.identity.credential
    testImplementation libs.android.identity.credential

    androidTestImplementation libs.android.junit
    androidTestImplementation libs.espresso.core
}

tasks.register("clearDocsDir", Delete.class) {
    delete(file("$rootDir/docs"))
}

dokkaGfm.dependsOn("clearDocsDir")
dokkaGfm {
    outputDirectory.set(file("$rootDir/docs"))
}

licenseReport {
    unionParentPomLicenses = false
    filters = [new LicenseBundleNormalizer(), new ReduceDuplicateLicensesFilter(), new ExcludeTransitiveDependenciesFilter()]
    configurations = ['releaseRuntimeClasspath']
    excludeBoms = true
    excludeOwnGroup = true
    renderers = [new InventoryMarkdownReportRenderer("licenses.md", "${POM_DESCRIPTION}")]
}

tasks.register('copyLicenseReport', Copy) {
    from "$buildDir/reports/dependency-license/licenses.md"
    into "$rootDir"
    dependsOn 'generateLicenseReport'
}
generateLicenseReport.finalizedBy("copyLicenseReport")
build.finalizedBy("generateLicenseReport", "dokkaGfm")

tasks.register('dokkaHtmlJar', Jar.class) {
    dependsOn(dokkaHtml)
    from(dokkaHtml)
    archiveClassifier.set("html-docs")
}

tasks.register('dokkaJavadocJar', Jar.class) {
    dependsOn(dokkaJavadoc)
    from(dokkaJavadoc)
    archiveClassifier.set("javadoc")
}

mavenPublishing {
    pom {
        ciManagement {
            system = "github"
            url = "${POM_SCM_URL}/actions"
        }
    }
}

afterEvaluate {
    tasks.named("javaDocReleaseGeneration").configure {
        it.enabled = false
    }
}